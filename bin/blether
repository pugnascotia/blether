#!/usr/bin/env node

/* Attempt to load the core library. We prefer the minimised one for
 * performance, however that won't exist when we first build the library,
 * and this entrypoint is called by the unit tests. So, fall back to the
 * unminified one if necessary */
function require_blether() {
    var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../dist');

    try {
        return require(lib + "/blether.min.js");
    }
    catch (e) {
        try {
            return require(lib + '/blether.js');
        }
        catch (e2) {
            console.error("Failed to find blether.min.js or blether.js under " + lib);
            process.exit(2);
        }
    }
}

function translate(source) {
    var text = fs.readFileSync(source).toString();

    if (/^#!/.test(text)) {
        text = text.replace(/^#!.*$/m, '');
    }

    return blether.translate(text, blether_opts);
}

//------------------------------------------------------------------------------

// Chrome debugging, IIRC
if (global.v8debug) {
	global.v8debug.Debug.setBreakOnException(); // speaks for itself
}

var path = require('path');
var fs   = require('fs');
var blether = require_blether();
var _eval = require("eval");

var argv = require('minimist')(process.argv.slice(2), {
    'boolean': [ 'c', 'x', 'runtime' ],
    'default': {
        "runtime": true
    },
    '--': true
});

var blether_opts = {
    runtime: argv.runtime
};

// console.dir(argv);
// console.dir(blether_opts);

if (argv.x && argv._) {
    try {
        var javascript = argv._.map(translate).join();
        _eval(javascript, "<argv>", null, true);
    }
    catch (e) {
        console.error("Failed at line [" + e.line + "], column [" + e.column + "]: " + e);
        console.error(e);
        process.exit(1);
    }
}
else {
    argv._.forEach(function(srcPath) {
        var destPath;

        try {
            var js = translate(srcPath);

            if (argv.c) {
                destPath = srcPath.replace(/\.\w+$/, ".js");

                fs.writeFileSync(destPath, js);
            }
            else {
                process.stdout.write(js);
                process.stdout.write("\n");
            }
        }
        catch (e) {
            console.error("Failed at line [" + e.line + "], column [" + e.column + "]: " + e);
            console.error(e);
            process.exit(1);
        }
    });
}
