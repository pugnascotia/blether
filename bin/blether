#!/usr/bin/env node
"use strict";

/* Attempt to load the core library. We prefer the minimised one for
 * performance, however that won't exist when we first build the library,
 * and this entrypoint is called by the unit tests. So, fall back to the
 * unminified one if necessary */
function require_blether() {
    var lib  = path.join(path.dirname(fs.realpathSync(__filename)), "../dist");

    try {
        return require(lib + "/blether.min.js");
    }
    catch (e) {
        try {
            return require(lib + "/blether.js");
        }
        catch (e2) {
            console.error("Failed to find blether.min.js or blether.js under " + lib);
            process.exit(2);
        }
    }
}

function translate(source) {
    var text = fs.readFileSync(source).toString();

    if (/^#!/.test(text)) {
        text = text.replace(/^#!.*$/m, "");
    }

    return blether.translate(text);
}

function destPath(srcPath, output_arg) {
    var newPath;

    if (output_arg) {
        if (fs.existsSync(output_arg)) {
            if (!fs.statSync(output_arg).isDirectory()) {
                throw new Error(output_arg  + " is not a directory");
            }
        }
        else {
            fs.mkdirSync(output_arg);
        }

        newPath = path.join(output_arg, path.basename(srcPath, path.extname(srcPath)) + ".js");
    }
    else {
        newPath = srcPath.replace(/\.\w+$/, ".js");
    }

    return newPath;
}

//------------------------------------------------------------------------------

// Chrome debugging, IIRC
if (global.v8debug) {
	global.v8debug.Debug.setBreakOnException(); // speaks for itself
}

var path = require("path");
var fs   = require("fs");
var _eval = require("eval");

var blether = require_blether();

var argv = require("minimist")(process.argv.slice(2), {
    "boolean": [ "c", "x", "runtime", "verbose" ],
    "string": [ "o" ],
    "default": {
        "runtime": true,
        "x": false,
    },
    "--": true
});

if (argv.x && argv._) {
    try {
        var javascript = argv._.map(translate).join();
		if (argv.runtime) {
			javascript += blether.runtime();
		}
        _eval(javascript, "<argv>", null, true);
    }
    catch (e) {
        console.error("Failed at line [" + e.line + "], column [" + e.column + "]: " + e.message);
        console.error("Stack: " + e.stack);
        process.exit(1);
    }
}
else if(argv._.length) {
	if (argv.runtime && !argv.c)  {
		process.stdout.write(blether.runtime());
		process.stdout.write("\n");
	}

    argv._.forEach(function(srcPath) {
        try {
			if (argv.verbose) {
				console.warn("Translating " + srcPath);
			}
            var js = "/* " + srcPath + "*/\n" + translate(srcPath);

            if (argv.c) {
				if (argv.verbose) {
					console.warn("Writing to " + destPath(srcPath, argv.o));
				}

                fs.writeFileSync(destPath(srcPath, argv.o), js);
            }
            else {
                process.stdout.write(js);
                process.stdout.write("\n");
            }
        }
        catch (e) {
            console.error("Failed at line [" + e.line + "], column [" + e.column + "]: " + e.message);
            console.error("Stack: " + e.stack);
            process.exit(1);
        }
    });
}
